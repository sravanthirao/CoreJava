Multithreading in java is a process of executing multiple threads simultaneously.

Thread is basically a lightweight sub-process, a smallest unit of processing.
Multiprocessing and multithreading, both are used to achieve multitasking.

But we use multithreading than multiprocessing because threads share a common memory area.
They don't allocate separate memory area so saves memory, and context-switching between 
the threads takes less time than process.

Java Multithreading is mostly used in games, animation etc.

There are two ways to create a thread:
1.By extending Thread class
2.By implementing Runnable interface.


COMMONLY USED METHODS IN THREAD CLASS:
---------------------------------------------------------------------------------------------------------------------

public void run(): is used to perform action for a thread.
public void start(): starts the execution of the thread.JVM calls the run() method on the thread.
public void sleep(long miliseconds): Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds.
public void join(): waits for a thread to die.
public void join(long miliseconds): waits for a thread to die for the specified miliseconds.
public int getPriority(): returns the priority of the thread.
public int setPriority(int priority): changes the priority of the thread.
public String getName(): returns the name of the thread.
public void setName(String name): changes the name of the thread.
public Thread currentThread(): returns the reference of currently executing thread.
public int getId(): returns the id of the thread.
public Thread.State getState(): returns the state of the thread.
public boolean isAlive(): tests if the thread is alive.
public void yield(): causes the currently executing thread object to temporarily pause and allow other threads to execute.
public void suspend(): is used to suspend the thread(depricated).
public void resume(): is used to resume the suspended thread(depricated).
public void stop(): is used to stop the thread(depricated).
public boolean isDaemon(): tests if the thread is a daemon thread.
public void setDaemon(boolean b): marks the thread as daemon or user thread.
public void interrupt(): interrupts the thread.
public boolean isInterrupted(): tests if the thread has been interrupted.
public static boolean interrupted(): tests if the current thread has been interrupted.



Priority of a Thread (Thread Priority):
--------------------------------------------------------------------------------------------------------------------
Each thread have a priority. Priorities are represented by a number between 1 and 10. 
In most cases, thread schedular schedules the threads according to their priority (known as preemptive scheduling).
 But it is not guaranteed because it depends on JVM specification that which scheduling it chooses.
 
 Default priority of a thread is 5 (NORM_PRIORITY). 
 The value of MIN_PRIORITY is 1 and the value of MAX_PRIORITY is 10.
 
Points to remember for Daemon Thread in Java
---------------------------------------------------------------------------------------------------------------------
It provides services to user threads for background supporting tasks. 
It has no role in life than to serve user threads.
Its life depends on user threads.
It is a low priority thread.

If you want to make a user thread as Daemon, it must not be started otherwise it will throw IllegalThreadStateException.
 